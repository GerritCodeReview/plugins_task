{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1d6f8807_522b6cc2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 11
      },
      "lineNbr": 7,
      "author": {
        "id": 1010013
      },
      "writtenOn": "2023-12-19T17:23:15Z",
      "side": 1,
      "message": "Too vague",
      "revId": "84b000a87f9a2ad1578c745e60b93f61422d81fb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26aed27f_ec31a363",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/task/properties/AbstractExpander.java",
        "patchSetId": 11
      },
      "lineNbr": 61,
      "author": {
        "id": 1010013
      },
      "writtenOn": "2023-12-19T02:11:16Z",
      "side": 1,
      "message": "Requiring objects in Lists to implement these interfaces causes them to be \"bound\" to this package/class, this makes it hard to use this class with any already existing class which you may not be in control of, or a class which is in a package which should not depend on this package.\n\nIt would be better to avoid requiring classes to have to be modified to be used by an AbstractExpander.",
      "revId": "84b000a87f9a2ad1578c745e60b93f61422d81fb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fcc91b7f_8fad3124",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/task/properties/AbstractExpander.java",
        "patchSetId": 11
      },
      "lineNbr": 61,
      "author": {
        "id": 1096442
      },
      "writtenOn": "2023-12-19T16:19:38Z",
      "side": 1,
      "message": "We can have the Properties class supply a map like below with registrations. ClassExpansionInfo will perform the validations for the unexpandedString and createInstance objects. This will also replace the validation done below in getUnexpandedStringFunction and getCreateInstanceWithExpandedFunction.\n\n```\n  public static class ClassExpansionInfo {\n    AccessibleObject unexpandedString;\n    Executable createInstance;\n  }\n  \n  AbstractExpander(Map\u003cClass\u003c?\u003e, ClassExpansionInfo\u003e expansionInfoByClass) {\n\n  }\n```",
      "parentUuid": "26aed27f_ec31a363",
      "revId": "84b000a87f9a2ad1578c745e60b93f61422d81fb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ef40ae2_b22d4ca9",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/task/properties/AbstractExpander.java",
        "patchSetId": 11
      },
      "lineNbr": 61,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2023-12-19T19:37:58Z",
      "side": 1,
      "message": "\u003e ```\n\u003e   public static class ClassExpansionInfo {\n\u003e ```\n\nMaybe to encapsulate better this should be a generic class? And then it could do validations against its generic type and provide more of the functionality from `getUnexpandedStringFunction` and `getCreateInstanceWithExpandedFunction`?\n\nAnd if it\u0027s going to \"do\" more, then it\u0027s probably not an \"Info\", so maybe name it `ClassExpander`? I think that fits this idea, since it\u0027s a specialized expander for a given class.",
      "parentUuid": "fcc91b7f_8fad3124",
      "revId": "84b000a87f9a2ad1578c745e60b93f61422d81fb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c746817f_3a47cd05",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/task/properties/AbstractExpander.java",
        "patchSetId": 11
      },
      "lineNbr": 146,
      "author": {
        "id": 1010013
      },
      "writtenOn": "2023-12-19T17:23:15Z",
      "side": 1,
      "message": "I think it\u0027s important to focus on what the code below here \"should\" attempt to look like. I would imagine it looking like:\n```\n for (T value: list) {\n   T expanded \u003d expand(value);\n   ...\n }\n```\nwhich I am imagining leads to the next function being something like:\n```\n protected \u003cT\u003e T expand(T value) {\n   if (value \u003d\u003d null) return null;\n   if (value instanceof String) {\n     return expandText((String) value);\n   }\n   return expanderByClass.getOrDefault(value.getClass(), Function.identity()).apply(value);\n }\n```\nBut I\u0027m not sure if the ?s below will work, it might take some fancy warning silencing and casting:\n```\n Map\u003cClass, Function\u003c?, ?\u003e\u003e expanderByClass;\n```\nOnce you have that, you can add a method to register a Function by Class?",
      "revId": "84b000a87f9a2ad1578c745e60b93f61422d81fb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad149b5b_b3de9e2c",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/task/properties/AbstractExpander.java",
        "patchSetId": 11
      },
      "lineNbr": 146,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2023-12-19T19:37:58Z",
      "side": 1,
      "message": "\u003e I think it\u0027s important to focus on what the code below here \"should\" attempt to look like.\n\nI\u0027m assuming you\u0027re making this comment in reference to Prudhvi\u0027s comment [1]...\n\n I would imagine it looking like:\n\u003e ```\n\u003e  for (T value: list) {\n\u003e    T expanded \u003d expand(value);\n\u003e    ...\n\u003e  }\n\u003e ```\n\nYes, or very close. That\u0027s roughly what PS10 had. Maybe we want to keep the class lookup for the list outside the loop, but maybe it doesn\u0027t matter since it\u0027s not anything expensive.\n\n\u003e which I am imagining leads to the next function being something like:\n\u003e ```\n\u003e  protected \u003cT\u003e T expand(T value) {\n\u003e    if (value \u003d\u003d null) return null;\n\u003e    if (value instanceof String) {\n\u003e      return expandText((String) value);\n\u003e    }\n\u003e    return expanderByClass.getOrDefault(value.getClass(), Function.identity()).apply(value);\n\u003e  }\n\u003e ```\n\nIf that expander Function does all of `getUnexpanded.apply(value)`, `expandText(toExpand)`, and `createInstanceWithExpanded.apply(value, expanded)` as well as managing the logic around `hasProperty` and `hasExpanded`, then yes, but I\u0027m not sure that works.\n\nI don\u0027t think using `Function.identity()` as a default makes sense. I would expect that if there\u0027s nothing registered, an exception is thrown. Do you see a use case where we could assume otherwise?\n\n\u003e But I\u0027m not sure if the ?s below will work, it might take some fancy warning silencing and casting:\n\u003e ```\n\u003e  Map\u003cClass, Function\u003c?, ?\u003e\u003e expanderByClass;\n\u003e ```\n\nInstead of a `Function`, Prudhvi and I came up with the `ClassExpansionInfo` above. Instances of that class are expected to be created by the caller (using a builder pattern to ensure the fields are set correctly). However, your comment here made me think we could make that class richer and do more of the \"function\" part, so I\u0027ve added a comment above on that.\n\nWith that enhancement, I think you\u0027d have:\n```\nMap\u003cClass\u003c?\u003e, ClassExpander\u003c?\u003e\u003e expanderByClass;\n```\n\nAnd then that `ClassExpander` would have methods to replace `getUnexpanded.apply(value)` and `createInstanceWithExpanded.apply(value, expanded)`.\n\n\u003e Once you have that, you can add a method to register a Function by Class?\n\nDoes it need to support registering or can the map be supplied in the Expander constructor? (like Prudhvi suggested above [1])\n\nIt\u0027s easy enough to support either, I\u0027m just curious if there\u0027s a bigger picture you have in mind.\n\n[1] https://gerrit-review.googlesource.com/c/plugins/task/+/396537/comment/26aed27f_ec31a363/",
      "parentUuid": "c746817f_3a47cd05",
      "revId": "84b000a87f9a2ad1578c745e60b93f61422d81fb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8b549fc_540abe8b",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/task/properties/AbstractExpander.java",
        "patchSetId": 11
      },
      "lineNbr": 146,
      "author": {
        "id": 1010013
      },
      "writtenOn": "2023-12-19T20:16:31Z",
      "side": 1,
      "message": "\u003e I\u0027m assuming you\u0027re making this comment in reference to Prudhvi\u0027s comment [1]...\n\nSort of, but mostly I\u0027m trying to side step that line a bit to get to the core of the bare minimum needed in this class to support extending it. I think it\u0027s important to start with the bare minimum and to then justify anything more.\n\n\u003e Yes, or very close. That\u0027s roughly what PS10 had. Maybe we want to keep the class lookup for the list outside the loop, but maybe it doesn\u0027t matter since it\u0027s not anything expensive.\n\nA single lookup is risky since nothing guarantees that all the classes are the same.\n\n\u003e \u003e which I am imagining leads to the next function being something like:\n\u003e \u003e ```\n\u003e \u003e  protected \u003cT\u003e T expand(T value) {\n\u003e \u003e    if (value \u003d\u003d null) return null;\n\u003e \u003e    if (value instanceof String) {\n\u003e \u003e      return expandText((String) value);\n\u003e \u003e    }\n\u003e \u003e    return expanderByClass.getOrDefault(value.getClass(), Function.identity()).apply(value);\n\u003e \u003e  }\n\u003e \u003e ```\n\u003e \n\u003e If that expander Function does all of `getUnexpanded.apply(value)`, `expandText(toExpand)`, and `createInstanceWithExpanded.apply(value, expanded)` as well as managing the logic around `hasProperty` and `hasExpanded`, then yes, but I\u0027m not sure that works.\n\nI don\u0027t think there is as much logic as you think, I don\u0027t think is has to track hasProperty and hasExpanded, that should be done in the for() loop in the parent method dealing with the List (but you may additionally need something similar in your apply). This \"apply\" only needs to know how to expand the exact class is was designed to work with. \n\nThe \"getUnexpanded.apply(value)`, `expandText(toExpand)`, and `createInstanceWithExpanded.apply(value, expanded)\" feels like awkward and not very generic logic to me that would be better not to have in here, and it gets simpler I think if it is not generic. If that logic ever does become reusable for other classes, then it can be shared (and made generic) via a helper class, or it can make good use of helper functions.\n\nMore importantly, even if that specific logic is reusable, nothing guarantees that it is the only \"custom\" logic that will ever be needed in here. So I think the extension point that I am proposing is not only simpler, I think it is more powerful as it allows other expansion approaches to potentially be plugged in if needed.\n\n\u003e I don\u0027t think using `Function.identity()` as a default makes sense. I would expect that if there\u0027s nothing registered, an exception is thrown. Do you see a use case where we could assume otherwise?\n\nI was mimicking what the code seems to already do on line 110, it does not attempt to expand what it doesn\u0027t understand. This allows fields which don\u0027t need expansion to exist, most objects likely don\u0027t have property references in them.\n\n\u003e Instead of a `Function`, Prudhvi and I came up with the `ClassExpansionInfo` above. ...\n\nSee my comment above about keeping this extension point simpler and less committed to a specific expansion approach.\n\n...\n\u003e It\u0027s easy enough to support either, I\u0027m just curious if there\u0027s a bigger picture you have in mind.\n\nSimplicity and flexibility.",
      "parentUuid": "ad149b5b_b3de9e2c",
      "revId": "84b000a87f9a2ad1578c745e60b93f61422d81fb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c3b815d_d202cbad",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/task/properties/AbstractExpander.java",
        "patchSetId": 11
      },
      "lineNbr": 146,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2023-12-19T21:05:23Z",
      "side": 1,
      "message": "\u003e \u003e I\u0027m assuming you\u0027re making this comment in reference to Prudhvi\u0027s comment [1]...\n\u003e \n\u003e Sort of, but mostly I\u0027m trying to side step that line a bit to get to the core of the bare minimum needed in this class to support extending it. I think it\u0027s important to start with the bare minimum and to then justify anything more.\n\n\u003e A single lookup is risky since nothing guarantees that all the classes are the same.\n\nAh right. It could be a List\u003cAnimal\u003e with Dog and Cat instances as the values. We\u0027d want to ensure we use the correct subclass.\n\n\u003e The \"getUnexpanded.apply(value),expandText(toExpand), andcreateInstanceWithExpanded.apply(value, expanded)\" feels like awkward and not very generic logic to me that would be better not to have in here, and it gets simpler I think if it is not generic. If that logic ever does become reusable for other classes, then it can be shared (and made generic) via a helper class, or it can make good use of helper functions.\n\nI didn\u0027t mean logic as the code inside those methods, I meant the workflow / transformation process they represent.\n\n\u003e More importantly, even if that specific logic is reusable, nothing guarantees that it is the only \"custom\" logic that will ever be needed in here. So I think the extension point that I am proposing is not only simpler, I think it is more powerful as it allows other expansion approaches to potentially be plugged in if needed.\n\nOk, so I think you\u0027re saying that if the caller has to provide this info anyway, pivot to using per-class functional interfaces instead of reflection?\n\n\u003e \n\u003e \u003e I don\u0027t think using `Function.identity()` as a default makes sense. I would expect that if there\u0027s nothing registered, an exception is thrown. Do you see a use case where we could assume otherwise?\n\u003e \n\u003e I was mimicking what the code seems to already do on line 110, it does not attempt to expand what it doesn\u0027t understand. This allows fields which don\u0027t need expansion to exist, most objects likely don\u0027t have property references in them.\n\nI\u0027m not sure which line 110 you\u0027re referring to (it\u0027s a comment in PS11). If you mean on the base/tip, that\u0027s at a higher level than the logic we\u0027re discussing for a List. Line 105 on the base forces to a `List\u003cString\u003e`, so I think if a non-String List is given, we\u0027ll get a runtime exception. However, the javadocs on that method and its callers seem to indicate that\u0027s not the expected behavior and that it\u0027s probably a bug. Seems like some unit tests for this class would help.\n\n\u003e \u003e It\u0027s easy enough to support either, I\u0027m just curious if there\u0027s a bigger picture you have in mind.\n\u003e \n\u003e Simplicity and flexibility.\n\nOk.\n\nGoing back to this:\n\u003e ```\n\u003e Map\u003cClass, Function\u003c?, ?\u003e\u003e expanderByClass;\n\u003e ```\n\nassuming I\u0027m right and you can\u0027t do all this in one Function, I think you could change the fields on the `ClassExpander` object we suggested to be the map value class:\n```\n  public static class ClassExpander\u003cT\u003e {\n    Function\u003cT, String\u003e getUnexpandedString;\n    BiFunction\u003cT, String, T\u003e createExpandedInstance;\n  }\n  \n  Map\u003cClass\u003c?\u003e, ClassExpander\u003c?\u003e\u003e expanderByClass;\n```\n\nThough extending that map in another class might be better because then I think you can enforce the same type for the Class and ClassExpander generics.\n\n```\n  public static class ClassExpanderMap\u003cT\u003e extends Map\u003cClass\u003cT\u003e, ClassExpander\u003cT\u003e\u003e {...}\n  \n  ClassExpanderMap\u003c?\u003e expanderByClass;\n```",
      "parentUuid": "a8b549fc_540abe8b",
      "revId": "84b000a87f9a2ad1578c745e60b93f61422d81fb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2412ce44_e732dd52",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/task/properties/AbstractExpander.java",
        "patchSetId": 11
      },
      "lineNbr": 167,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2023-12-18T23:39:59Z",
      "side": 1,
      "message": "nit: Should this be `getProvidesUnexpandedStringFunction`?",
      "range": {
        "startLine": 167,
        "startChar": 36,
        "endLine": 167,
        "endChar": 63
      },
      "revId": "84b000a87f9a2ad1578c745e60b93f61422d81fb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb3ca59a_e5b10486",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/task/properties/AbstractExpander.java",
        "patchSetId": 11
      },
      "lineNbr": 187,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2023-12-18T23:39:59Z",
      "side": 1,
      "message": "nit: \"Not a String and no ...\"",
      "range": {
        "startLine": 187,
        "startChar": 32,
        "endLine": 187,
        "endChar": 35
      },
      "revId": "84b000a87f9a2ad1578c745e60b93f61422d81fb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58a5131c_f7a07331",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/task/properties/AbstractExpander.java",
        "patchSetId": 11
      },
      "lineNbr": 191,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2023-12-18T23:39:59Z",
      "side": 1,
      "message": "nit: should this be `getProvidesInstanceWithExpandedStringFunction`?",
      "range": {
        "startLine": 191,
        "startChar": 41,
        "endLine": 191,
        "endChar": 78
      },
      "revId": "84b000a87f9a2ad1578c745e60b93f61422d81fb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}