{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1d6f8807_522b6cc2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 11
      },
      "lineNbr": 7,
      "author": {
        "id": 1010013
      },
      "writtenOn": "2023-12-19T17:23:15Z",
      "side": 1,
      "message": "Too vague",
      "revId": "84b000a87f9a2ad1578c745e60b93f61422d81fb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26aed27f_ec31a363",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/task/properties/AbstractExpander.java",
        "patchSetId": 11
      },
      "lineNbr": 61,
      "author": {
        "id": 1010013
      },
      "writtenOn": "2023-12-19T02:11:16Z",
      "side": 1,
      "message": "Requiring objects in Lists to implement these interfaces causes them to be \"bound\" to this package/class, this makes it hard to use this class with any already existing class which you may not be in control of, or a class which is in a package which should not depend on this package.\n\nIt would be better to avoid requiring classes to have to be modified to be used by an AbstractExpander.",
      "revId": "84b000a87f9a2ad1578c745e60b93f61422d81fb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fcc91b7f_8fad3124",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/task/properties/AbstractExpander.java",
        "patchSetId": 11
      },
      "lineNbr": 61,
      "author": {
        "id": 1096442
      },
      "writtenOn": "2023-12-19T16:19:38Z",
      "side": 1,
      "message": "We can have the Properties class supply a map like below with registrations. ClassExpansionInfo will perform the validations for the unexpandedString and createInstance objects. This will also replace the validation done below in getUnexpandedStringFunction and getCreateInstanceWithExpandedFunction.\n\n```\n  public static class ClassExpansionInfo {\n    AccessibleObject unexpandedString;\n    Executable createInstance;\n  }\n  \n  AbstractExpander(Map\u003cClass\u003c?\u003e, ClassExpansionInfo\u003e expansionInfoByClass) {\n\n  }\n```",
      "parentUuid": "26aed27f_ec31a363",
      "revId": "84b000a87f9a2ad1578c745e60b93f61422d81fb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c746817f_3a47cd05",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/task/properties/AbstractExpander.java",
        "patchSetId": 11
      },
      "lineNbr": 146,
      "author": {
        "id": 1010013
      },
      "writtenOn": "2023-12-19T17:23:15Z",
      "side": 1,
      "message": "I think it\u0027s important to focus on what the code below here \"should\" attempt to look like. I would imagine it looking like:\n```\n for (T value: list) {\n   T expanded \u003d expand(value);\n   ...\n }\n```\nwhich I am imagining leads to the next function being something like:\n```\n protected \u003cT\u003e T expand(T value) {\n   if (value \u003d\u003d null) return null;\n   if (value instanceof String) {\n     return expandText((String) value);\n   }\n   return expanderByClass.getOrDefault(value.getClass(), Function.identity()).apply(value);\n }\n```\nBut I\u0027m not sure if the ?s below will work, it might take some fancy warning silencing and casting:\n```\n Map\u003cClass, Function\u003c?, ?\u003e\u003e expanderByClass;\n```\nOnce you have that, you can add a method to register a Function by Class?",
      "revId": "84b000a87f9a2ad1578c745e60b93f61422d81fb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2412ce44_e732dd52",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/task/properties/AbstractExpander.java",
        "patchSetId": 11
      },
      "lineNbr": 167,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2023-12-18T23:39:59Z",
      "side": 1,
      "message": "nit: Should this be `getProvidesUnexpandedStringFunction`?",
      "range": {
        "startLine": 167,
        "startChar": 36,
        "endLine": 167,
        "endChar": 63
      },
      "revId": "84b000a87f9a2ad1578c745e60b93f61422d81fb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb3ca59a_e5b10486",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/task/properties/AbstractExpander.java",
        "patchSetId": 11
      },
      "lineNbr": 187,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2023-12-18T23:39:59Z",
      "side": 1,
      "message": "nit: \"Not a String and no ...\"",
      "range": {
        "startLine": 187,
        "startChar": 32,
        "endLine": 187,
        "endChar": 35
      },
      "revId": "84b000a87f9a2ad1578c745e60b93f61422d81fb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58a5131c_f7a07331",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/task/properties/AbstractExpander.java",
        "patchSetId": 11
      },
      "lineNbr": 191,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2023-12-18T23:39:59Z",
      "side": 1,
      "message": "nit: should this be `getProvidesInstanceWithExpandedStringFunction`?",
      "range": {
        "startLine": 191,
        "startChar": 41,
        "endLine": 191,
        "endChar": 78
      },
      "revId": "84b000a87f9a2ad1578c745e60b93f61422d81fb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}