{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a5d8bd92_588af6ee",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/task/RelativeSubTask.java",
        "patchSetId": 10
      },
      "lineNbr": 25,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2023-12-14T18:27:22Z",
      "side": 1,
      "message": "s/subTask/value/\n\n```suggestion\n  public static RelativeSubTask create(FileKey file, String value) {\n    return new AutoValue_RelativeSubTask(file, value);\n```",
      "range": {
        "startLine": 24,
        "startChar": 0,
        "endLine": 25,
        "endChar": 56
      },
      "revId": "da8a88fc8e3a15e1dce6d9c8d62f29210b900997",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f41721a_e128bca5",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/task/properties/AbstractExpander.java",
        "patchSetId": 10
      },
      "lineNbr": 43,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2023-12-14T18:27:22Z",
      "side": 1,
      "message": "```suggestion\n  public interface UnexpandedStringProvider {\n```",
      "range": {
        "startLine": 43,
        "startChar": 19,
        "endLine": 43,
        "endChar": 43
      },
      "revId": "da8a88fc8e3a15e1dce6d9c8d62f29210b900997",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f47ef316_06f70285",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/task/properties/AbstractExpander.java",
        "patchSetId": 10
      },
      "lineNbr": 121,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2023-12-14T18:27:22Z",
      "side": 1,
      "message": "Should this also check `instanceof InstanceWithExpandedStringProvider`?\n```suggestion\n          Object first \u003d list.get(0);\n          if (first instanceof String ||\n            (first instanceof UnexpandedStringProvider \u0026\u0026 first instanceof InstanceWithExpandedStringProvider)) {\n```\n\n\nHowever, maybe this should be happening in your `expand(List\u003cT\u003e list)` instead. That seems the appropriate place for list-specific checks. And that might lead to an improvement for the duplicate checking behavior I comment on below.",
      "range": {
        "startLine": 121,
        "startChar": 47,
        "endLine": 121,
        "endChar": 94
      },
      "revId": "da8a88fc8e3a15e1dce6d9c8d62f29210b900997",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "adc901bc_367e9248",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/task/properties/AbstractExpander.java",
        "patchSetId": 10
      },
      "lineNbr": 161,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2023-12-14T18:27:22Z",
      "side": 1,
      "message": "nit: this can probably be protected? Likely the same for the existing methods below, but those can be fixed separately.",
      "range": {
        "startLine": 161,
        "startChar": 2,
        "endLine": 161,
        "endChar": 8
      },
      "revId": "da8a88fc8e3a15e1dce6d9c8d62f29210b900997",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "260a23e3_6e1ff887",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/task/properties/AbstractExpander.java",
        "patchSetId": 10
      },
      "lineNbr": 163,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2023-12-14T18:27:22Z",
      "side": 1,
      "message": "It seems a little silly to repeat these `instanceof` checks for every item in the list. Won\u0027t all items in the list have the same result?",
      "revId": "da8a88fc8e3a15e1dce6d9c8d62f29210b900997",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0d39802_80dbbfff",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/task/properties/AbstractExpander.java",
        "patchSetId": 10
      },
      "lineNbr": 163,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2023-12-14T20:26:39Z",
      "side": 1,
      "message": "Also, if you wanted to look at using annotations to solve this instead, I think it would be something like:\n\nchange the interfaces above into annotations:\n```\n  /** Returns a string which needs to be expanded */\n  @Target({METHOD})\n  @Retention(RUNTIME)\n  public @interface ProvidesUnexpandedString {}\n\n  /** Returns an instance with the input expanded string */\n  @Target({METHOD})\n  @Retention(RUNTIME)\n  public @interface ProvidesInstanceWithExpandedString {}\n```\n\nand then in `RelativeSubTask` you would have:\n```\n  @ProvidesUnexpandedString\n  public abstract String value();\n  \n  @ProvidesInstanceWithExpandedString\n  public RelativeSubTask createInstance(String expanded) {\n```\n\nand then in a `getUnexpanded()` method in this class you would do:\n```\n  protected String getUnexpanded(T value) {\n    for (Method method : value.getClass().getMethods()) {\n      if (method.isAnnotationPresent(ProvidesUnexpandedString.class)) {\n        // probably should do a check like:\n        // checkArgument(String.class.isAssignableFrom(method.getReturnType()), ...);\n        // See QueryBuilder.Definition for an example\n        return expandText(method.invoke(value));\n        // since this method.invoke() takes a value object, you should be able\n        // to do it once for each List\u003cT\u003e and use the same method object repeatedly\n      }\n    }\n  }   \n```\n\nand then a similar thing for ProvidesInstanceWithExpandedString.",
      "parentUuid": "260a23e3_6e1ff887",
      "revId": "da8a88fc8e3a15e1dce6d9c8d62f29210b900997",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf137bec_8f0737e2",
        "filename": "src/main/resources/Documentation/test/task_states.md",
        "patchSetId": 10
      },
      "lineNbr": 2611,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2023-12-14T18:27:22Z",
      "side": 1,
      "message": "Can you add a `[root \"Root Preload from group ref which has subtask in different group ref\"]`? That adds coverage for referring to a 3rd file, which I don\u0027t think the other tests cover.",
      "revId": "da8a88fc8e3a15e1dce6d9c8d62f29210b900997",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}