{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "81d2aeaa_8dcadb67",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/task/Modules.java",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 1096442
      },
      "writtenOn": "2023-11-23T10:53:40Z",
      "side": 1,
      "message": "Not working when there is a space in the task name",
      "range": {
        "startLine": 61,
        "startChar": 8,
        "endLine": 61,
        "endChar": 24
      },
      "revId": "8fb3d9af3c07e37756b04ecd4494eb6e7dba949f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2e98d0c7_de9a9a2a",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/task/Modules.java",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 1096442
      },
      "writtenOn": "2023-11-24T04:25:52Z",
      "side": 1,
      "message": "Works when space is escaped.",
      "parentUuid": "81d2aeaa_8dcadb67",
      "range": {
        "startLine": 61,
        "startChar": 8,
        "endLine": 61,
        "endChar": 24
      },
      "revId": "8fb3d9af3c07e37756b04ecd4494eb6e7dba949f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "baf70edf_f9d44452",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/task/Modules.java",
        "patchSetId": 2
      },
      "lineNbr": 65,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2023-11-09T23:15:18Z",
      "side": 1,
      "message": "You don\u0027t need a method for this, just move your `List` declaration here\n```suggestion\n    public final List\u003cString\u003e includedRoots \u003d new ArrayList\u003c\u003e();\n```",
      "range": {
        "startLine": 63,
        "startChar": 0,
        "endLine": 65,
        "endChar": 5
      },
      "revId": "8fb3d9af3c07e37756b04ecd4494eb6e7dba949f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "974175d3_bea65abc",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/task/Modules.java",
        "patchSetId": 2
      },
      "lineNbr": 65,
      "author": {
        "id": 1096442
      },
      "writtenOn": "2023-11-24T04:25:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "baf70edf_f9d44452",
      "range": {
        "startLine": 63,
        "startChar": 0,
        "endLine": 65,
        "endChar": 5
      },
      "revId": "8fb3d9af3c07e37756b04ecd4494eb6e7dba949f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6cd3cdc0_e4b89e59",
        "filename": "src/main/resources/Documentation/task.md",
        "patchSetId": 2
      },
      "lineNbr": 596,
      "author": {
        "id": 1010013
      },
      "writtenOn": "2023-11-10T17:32:39Z",
      "side": 1,
      "message": "I\u0027ll be honest, I really don\u0027t like this approach. It would be better to have a more generic filtering mechanism which is not root specific and allows you to specify any node in the tree to mark as \"not applicable\". \n\nI think the approach I propose would have the additional benefit of working if you start recursing over dependencies at some point, and a dependency points to a node outside of the root that you want to filter. With the --task--root approach, that dependency would likely get evaluated, whereas with the approach I propose it would likely halt as you would want.",
      "revId": "8fb3d9af3c07e37756b04ecd4494eb6e7dba949f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "776f7096_321a2bc1",
        "filename": "src/main/resources/Documentation/task.md",
        "patchSetId": 2
      },
      "lineNbr": 596,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2023-11-10T18:22:42Z",
      "side": 1,
      "message": "\u003e I\u0027ll be honest, I really don\u0027t like this approach. It would be better to have a more generic filtering mechanism which is not root specific and allows you to specify any node in the tree to mark as \"not applicable\". \n\nThat sounds a bit like this opposite of this approach though. The caller would need to know all the other roots and request that they be marked NA? Maybe I\u0027m missing something.\n\n\u003e \n\u003e I think the approach I propose would have the additional benefit of working if you start recursing over dependencies at some point, and a dependency points to a node outside of the root that you want to filter. With the --task--root approach, that dependency would likely get evaluated, whereas with the approach I propose it would likely halt as you would want.\n\nI\u0027m not sure if that would be desired behavior or not. I could see use cases for either result being valid.\n\nThe advantage of `--task--root` is that by limiting the scope to roots it does simplify the approach a lot and it\u0027s not adding a large code or API burden. We can always add a more generic filtering mechanism when that comes up as a use case someone wants to support.",
      "parentUuid": "6cd3cdc0_e4b89e59",
      "revId": "8fb3d9af3c07e37756b04ecd4494eb6e7dba949f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd1b9f57_83422a17",
        "filename": "src/main/resources/Documentation/task.md",
        "patchSetId": 2
      },
      "lineNbr": 596,
      "author": {
        "id": 1010013
      },
      "writtenOn": "2023-11-10T19:23:13Z",
      "side": 1,
      "message": "\u003e The caller would need to know all the other roots and request that they be marked NA? Maybe I\u0027m missing something.\n\nThe way I specified it, you are correct. I agree that you would only want to specify the ones you care about not the ones you don\u0027t care about, it was not my intent to \"invert that\". My intent is to make the \"filtering\" apply to any node, not just a root. We don\u0027t want roots to be seen as special, they are only special in QCOM because that is currently how CI systems use them. The more you move towards self service though, the more people will potentially need a CI system anywhere in the tree, so the more you likely will not be able to filter by roots, so this feels like a very short term approach that is very constricting.\n\nI also see that being able to specify an arbitrary subtree to keep would have efficiency issues if that specification does not \"start\" at a root. i.e. if I want to keep any subtree which has any arbitrary task, I would have to process entire subtrees just to find out if that task was in it or not, and that would defeat the point of the performance gain you are trying to achieve here. So to avoid that, you would want to make it possible to specify a \"path\" from root to the task. That could be done similar to the way you are doing roots with something as simple as: --task--keep \u003ctask_name\u003e[\u003cseparator\u003e\u003ctask_name\u003e...]. That would require defining a \u003cseparator\u003e as a character that cannot be in a task name, and ideally (but not a requirement), something that can\u0027t be in a task expression. But I suspect that if you wanted to skip that for now, you could probably make this work basically the way you currently have it, by just changing the name of the switch to --task--keep and not supporting specifying any \"deeper\" in the tree yet? Than later if you want to go deeper, you could define a \u003cseparator\u003e.\n\nYes, I realize that negates my proposal of wanting to filter dependencies, but I now think that idea was flawed from a performance standpoint.",
      "parentUuid": "776f7096_321a2bc1",
      "revId": "8fb3d9af3c07e37756b04ecd4494eb6e7dba949f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24da88da_e03f605d",
        "filename": "src/main/resources/Documentation/task.md",
        "patchSetId": 2
      },
      "lineNbr": 596,
      "author": {
        "id": 1010013
      },
      "writtenOn": "2023-11-10T19:26:49Z",
      "side": 1,
      "message": "Another alternative to --task--keep would be to introduce --task--only \u003ctask_name\u003e[\u003cseparator\u003e\u003ctask_name\u003e...] which would also negate the need to use --task--all (because its a bit odd to specify --task--all and then another switch that says \"no, not really all\")",
      "parentUuid": "fd1b9f57_83422a17",
      "revId": "8fb3d9af3c07e37756b04ecd4494eb6e7dba949f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "61f2083f_9796a7d4",
        "filename": "src/main/resources/Documentation/task.md",
        "patchSetId": 2
      },
      "lineNbr": 596,
      "author": {
        "id": 1096442
      },
      "writtenOn": "2023-11-24T04:25:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "24da88da_e03f605d",
      "revId": "8fb3d9af3c07e37756b04ecd4494eb6e7dba949f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95ed5f94_2664cf08",
        "filename": "src/main/resources/Documentation/test/roots_filter.md",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1152670
      },
      "writtenOn": "2023-11-09T08:53:29Z",
      "side": 1,
      "message": "If possible it\u0027d be better to use the existing files to add the tests, and avoid adding another file to upload, as that quickly adds a lot of time to the overall test suite",
      "revId": "8fb3d9af3c07e37756b04ecd4494eb6e7dba949f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30a1610a_23e3bd67",
        "filename": "src/main/resources/Documentation/test/roots_filter.md",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2023-11-09T23:15:18Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "95ed5f94_2664cf08",
      "revId": "8fb3d9af3c07e37756b04ecd4494eb6e7dba949f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "216c1ae1_eb4bd513",
        "filename": "src/main/resources/Documentation/test/roots_filter.md",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1096442
      },
      "writtenOn": "2023-11-24T04:25:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "30a1610a_23e3bd67",
      "revId": "8fb3d9af3c07e37756b04ecd4494eb6e7dba949f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}